# Copyright 2003 Jens Maurer
# Copyright 2009-2011 Steven Watanabe
# Copyright 2017 James E. King III
#
# Distributed under the Boost Software License, Version 1.0. (See accompany-
# ing file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

# Boost Random Library test Jamfile

# bring in rules for testing
import testing ;

project libs/random/test
    : requirements

      # boost.jam defines BOOST_ALL_NO_LIB for builds 
      # which cannot be undefined?
      <toolset>msvc:<define>BOOST_RANDOM_FORCE_AUTO_LINK
      <toolset>gcc-mingw:<linkflags>"-lbcrypt"

      # boost::random needs this setting for a warning free build:
      <toolset>msvc:<define>_SCL_SECURE_NO_WARNINGS

      # link static for easier debugging, if you need to debug...
      # <link>static
;

run test_const_mod.cpp /boost//unit_test_framework ;
run test_generate_canonical.cpp /boost//unit_test_framework ;
run test_random_number_generator.cpp /boost//unit_test_framework ;
run test_random_device.cpp /boost//unit_test_framework ;

run test_minstd_rand0.cpp /boost//unit_test_framework ;
run test_minstd_rand.cpp /boost//unit_test_framework ;
run test_rand48.cpp /boost//unit_test_framework ;
run test_mt11213b.cpp /boost//unit_test_framework ;
run test_mt19937.cpp /boost//unit_test_framework ;
run test_mt19937_64.cpp /boost//unit_test_framework ;
run test_ecuyer1988.cpp /boost//unit_test_framework ;
run test_hellekalek1995.cpp /boost//unit_test_framework ;
run test_linear_feedback_shift.cpp /boost//unit_test_framework ;
run test_taus88.cpp /boost//unit_test_framework ;
run test_kreutzer1986.cpp /boost//unit_test_framework ;
run test_ranlux3.cpp /boost//unit_test_framework ;
run test_ranlux4.cpp /boost//unit_test_framework ;
run test_ranlux3_01.cpp /boost//unit_test_framework ;
run test_ranlux4_01.cpp /boost//unit_test_framework ;
run test_ranlux64_4.cpp /boost//unit_test_framework ;
run test_ranlux64_3.cpp /boost//unit_test_framework ;
run test_ranlux64_3_01.cpp /boost//unit_test_framework ;
run test_ranlux64_4_01.cpp /boost//unit_test_framework ;
run test_ranlux24_base.cpp /boost//unit_test_framework ;
run test_ranlux24.cpp /boost//unit_test_framework ;
run test_ranlux48_base.cpp /boost//unit_test_framework ;
run test_ranlux48.cpp /boost//unit_test_framework ;
run test_knuth_b.cpp /boost//unit_test_framework ;
run test_independent_bits31.cpp /boost//unit_test_framework ;
run test_independent_bits32.cpp /boost//unit_test_framework ;
run test_lagged_fibonacci.cpp /boost//unit_test_framework ;
run test_lagged_fibonacci607.cpp /boost//unit_test_framework ;
run test_lagged_fibonacci1279.cpp /boost//unit_test_framework ;
run test_lagged_fibonacci2281.cpp /boost//unit_test_framework ;
run test_lagged_fibonacci3217.cpp /boost//unit_test_framework ;
run test_lagged_fibonacci4423.cpp /boost//unit_test_framework ;
run test_lagged_fibonacci9689.cpp /boost//unit_test_framework ;
run test_lagged_fibonacci19937.cpp /boost//unit_test_framework ;
run test_lagged_fibonacci23209.cpp /boost//unit_test_framework ;
run test_lagged_fibonacci44497.cpp /boost//unit_test_framework ;
run test_zero_seed.cpp /boost//unit_test_framework ;

# Disable by default.  These don't add much and the larger
# ones can overflow the stack.
explicit test_lagged_fibonacci1279 test_lagged_fibonacci2281
    test_lagged_fibonacci2281 test_lagged_fibonacci3217
    test_lagged_fibonacci4423 test_lagged_fibonacci9689
    test_lagged_fibonacci19937 test_lagged_fibonacci23209
    test_lagged_fibonacci44497 ;

run test_seed_seq.cpp /boost//unit_test_framework ;

run test_binomial.cpp ;
run test_binomial_distribution.cpp /boost//unit_test_framework ;
run test_poisson.cpp ;
run test_poisson_distribution.cpp /boost//unit_test_framework ;
run test_discrete.cpp ;
run test_discrete_distribution.cpp /boost//unit_test_framework ;
run test_gamma.cpp ;
run test_gamma_distribution.cpp /boost//unit_test_framework ;
run test_weibull.cpp ;
run test_weibull_distribution.cpp /boost//unit_test_framework ;
run test_extreme_value.cpp ;
run test_extreme_value_distribution.cpp /boost//unit_test_framework ;
run test_negative_binomial.cpp ;
run test_negative_binomial_distribution.cpp /boost//unit_test_framework ;
run test_chi_squared.cpp ;
run test_chi_squared_distribution.cpp /boost//unit_test_framework ;
run test_fisher_f.cpp ;
run test_fisher_f_distribution.cpp /boost//unit_test_framework ;
run test_student_t.cpp ;
run test_student_t_distribution.cpp /boost//unit_test_framework ;
run test_normal.cpp ;
run test_normal_distribution.cpp /boost//unit_test_framework ;
run test_piecewise_constant.cpp ;
run test_piecewise_constant_distribution.cpp /boost//unit_test_framework ;
run test_piecewise_linear.cpp ;
run test_piecewise_linear_distribution.cpp /boost//unit_test_framework ;
run test_exponential.cpp ;
run test_exponential_distribution.cpp /boost//unit_test_framework ;
run test_bernoulli.cpp ;
run test_bernoulli_distribution.cpp /boost//unit_test_framework ;
run test_cauchy.cpp ;
run test_cauchy_distribution.cpp /boost//unit_test_framework ;
run test_geometric.cpp ;
run test_geometric_distribution.cpp /boost//unit_test_framework ;
run test_lognormal.cpp ;
run test_lognormal_distribution.cpp /boost//unit_test_framework ;
run test_triangle.cpp ;
run test_triangle_distribution.cpp /boost//unit_test_framework ;
run test_uniform_int.cpp ;
run test_uniform_int_distribution.cpp /boost//unit_test_framework ;
run test_uniform_real.cpp ;
run test_uniform_real_distribution.cpp /boost//unit_test_framework ;
run test_uniform_on_sphere.cpp ;
run test_uniform_on_sphere_distribution.cpp /boost//unit_test_framework ;
run test_uniform_smallint.cpp ;
run test_uniform_smallint_distribution.cpp /boost//unit_test_framework ;
run test_old_uniform_real.cpp ;
run test_old_uniform_real_distribution.cpp /boost//unit_test_framework ;
run test_old_uniform_int.cpp ;
run test_old_uniform_int_distribution.cpp /boost//unit_test_framework ;
run test_beta.cpp ;
run test_beta_distribution.cpp /boost//unit_test_framework ;
run test_laplace.cpp ;
run test_laplace_distribution.cpp /boost//unit_test_framework ;
run test_non_central_chi_squared.cpp ;
run test_non_central_chi_squared_distribution.cpp /boost//unit_test_framework ;
run test_hyperexponential.cpp ;
run test_hyperexponential_distribution.cpp /boost//unit_test_framework ;

exe statistic_tests.exe : statistic_tests.cpp ;
explicit statistic_tests.exe ;

install statistic_tests : statistic_tests.exe : <install-type>EXE <location>. ;
explicit statistic_tests ;

#
# Multiprecision tests:
#
run multiprecision_int_test.cpp /boost//unit_test_framework ;
# This one runs too slow in debug mode, we really need inline expansions turned on amonst other things:
run multiprecision_float_test.cpp /boost//unit_test_framework : : : release ;

#
# random_provider tests:
#

# a small benchmark test for random generation
run test_bench_random.cpp ../../timer/build//boost_timer : : : <toolset>clang-cloudabi:<build>no <link>static ;

run test_entropy_error.cpp ;

# tests for the header-only random provider
# there are a number of variations to test all compile-time branches
# and to make sure we test all the error handling code paths

run test_detail_random_provider.cpp 
  : : :
        <define>BOOST_RANDOM_PROVIDER_SHOW                              # output the selected provider at compile time
  : test_detail_random_provider_happy_default ;                         # test the auto-selected happy path

run test_detail_random_provider.cpp 
  : : :
        <define>_WIN32_WINNT=0x0600                                     # will force bcrypt over wincrypt
        <define>BOOST_RANDOM_PROVIDER_SHOW                              # output the selected provider at compile time
        <build>no                                                       # do not build
        <target-os>windows:<build>yes                                   # except for windows
  : test_detail_random_provider_happy_bcrypt ;

run test_detail_random_provider.cpp
        mock_random
  : : :
        <define>_WIN32_WINNT=0x0600                                     # will force bcrypt over wincrypt
        <define>BOOST_RANDOM_PROVIDER_NO_LIB                            # disable any auto-linking
        <define>BOOST_RANDOM_PROVIDER_SHOW                              # output the selected provider at compile time
        <define>BOOST_RANDOM_TEST_RANDOM_MOCK                           # mock wincrypt to force error path testing
        <build>no                                                       # do not build
        <target-os>windows:<build>yes                                   # except for windows
  : test_detail_random_provider_sad_bcrypt ;

# mock testing the wincrypt paths requires a DLL
lib mock_random
  : mock_random.cpp
  : <link>shared
        <build>no                                                       # do not build on any target-os
        <target-os>windows:<build>yes ;                                 # except for windows

run test_detail_random_provider.cpp 
  : : :
        <define>_WIN32_WINNT=0x0501                                     # will force wincrypt over bcrypt
        <define>BOOST_RANDOM_PROVIDER_SHOW                              # output the selected provider at compile time
        <build>no                                                       # do not build on any target-os
        <target-os>windows:<build>yes                                   # except for windows
  : test_detail_random_provider_happy_wincrypt ;

run test_detail_random_provider.cpp
  mock_random
  : : :
        <define>_WIN32_WINNT=0x0501                                     # will force wincrypt over bcrypt
        <define>BOOST_RANDOM_PROVIDER_NO_LIB                            # disable any auto-linking
        <define>BOOST_RANDOM_PROVIDER_SHOW                              # output the selected provider at compile time
        <define>BOOST_RANDOM_TEST_RANDOM_MOCK                           # mock wincrypt to force error path testing
        <build>no                                                       # do not build on any target-os
        <target-os>windows:<build>yes                                   # except for windows
  : test_detail_random_provider_sad_wincrypt ;

# CI builds in travis will eventually select getentropy when they move
# to a version of ubuntu with glibc-2.25 on it, so when that happens keep 
# testing the posix provider:
run test_detail_random_provider.cpp 
  : : :
        <define>BOOST_RANDOM_PROVIDER_FORCE_POSIX                       # will force POSIX over getentropy
        <define>BOOST_RANDOM_PROVIDER_SHOW                              # output the selected provider at compile time
        <target-os>windows:<build>no                                    # do not bother running on windows
        <toolset>clang-cloudabi:<build>no                               # no need to build under cloudabi
  : test_detail_random_provider_happy_posix ;

run test_detail_random_provider.cpp 
  : : :
        <define>BOOST_RANDOM_PROVIDER_FORCE_POSIX                       # will force POSIX over getentropy
        <define>BOOST_RANDOM_PROVIDER_SHOW                              # output the selected provider at compile time
        <define>BOOST_RANDOM_TEST_RANDOM_MOCK                           # redirect code to use mock system calls
        <target-os>windows:<build>no                                    # do not bother running on windows
        <toolset>clang-cloudabi:<build>no                               # no need to build under cloudabi
  : test_detail_random_provider_sad_posix ;

